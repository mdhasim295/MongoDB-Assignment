Insert Documents
---------------------------------------------
db.movies.insertMany([
{
"title":"Fight Club",
"writer":"Chuck Palahniuko",
"year":"1999",
"actors":[
"Brad Pitt",
"Edward Norton"
]
},

{
"title":"Fight Club",
"writer":"Chuck Palahniuko",
"year":"1999",
"actors":[
"Brad Pitt",
"Edward Norton"
]
}
{
"title":"Pulp Fiction",
"writer":"Quentin Tarantino" ,
"year":"1994",
"actors":[
"John Travolta",
"Uma Thurman"
]
}
{
"title":"Inglorious Basterds",
"writer":"Quentin Tarantino" ,
"year":"2009",
"actors":[
"Brad Pitt",
"Diane Kruger",
"Eli Roth"
]
}
{
"title":"The Hobbit: The Battle of the Five Armies",
"writer":"J.R.R. Tolkein",
"year":"2012",
"franchise": "The Hobbit"
}
{
"title":"The Hobbit: The Desolation of Smaug",
"writer":"J.R.R. Tolkein",
"year":"2013",
"franchise": "The Hobbit",
"synopsis":"Bilbo Company are forced to engage in a war against an array of compbatants and keep the Lonely Mountain from failing intothe hands of the rising darkness."
}

{
"title": "Pee Wee Herman's Big Adventure"
}
{
"title": "Avatar"
}

{
"title":"The Hobbit: An Expected Journey",
"writer":"J.R.R. Tolkein",
"year":"2012",
"franchise": "The Hobbit",
"synopsis": "A reluctant Hobbit, Bilbo Baggins, set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home- and the gold within it from the dragon Smaug"
}
"The drwarves along with Bilbo Baggins and Gandalf and Grey, continue their quest to reclaim Erebor, their Homeland, from Smaug. Bilbo Baggins is in possesion of the mysterious and magical ring."

])

Query/Find Documents:

Query the movies collection to:

Assignment
1. Get all the document
 Ans: db.movies.find({})
2. get all the documents with writer set to "Quentin Tarantino"

Ans:- db.movies.find({writer:"Quentin Tarantino"})
3. get all documents where actors include "Brad Pitt"

Ans: db.movies.find({actors:"Brad Pitt"})
4. get all documents with franchise set to "The Hobbit"

Ans: db.movies.find({franchise:"The Hobbit"})
5. get all movies released in the 90s
Ans:  db.movies.find({$and:[{year:{$gt:"1990"}},{year:{$lt:"2000"}}]})  or db.movies.find({year:{$gt:"1990",$lt:"2000"}})
6. get all movies released before the year 2000 or after 2010

Ans: db.movies.find({$or:[{year:{$gt:"2010"}},{year:{$lt:"2000"}}]})

Update Documents

db.movies.insertOne({
"title":"The Hobbit: An Expected Journey",
"writer":"J.R.R. Tolkein",
"year":"2012",
"franchise": "The Hobbit",
"synopsis": "A reluctant Hobbit, Bilbo Baggins, set out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home- and the gold within it from the dragon Smaug"
})

2. db.movies.update(
{"_id" : "5f79d6c433aa4e3d907520cc"},
{$set: { "synopsis" : "The drwarves along with Bilbo Baggins and Gandalf and Grey, continue their quest to reclaim Erebor, their Homeland, from Smaug. Bilbo Baggins is in possesion of the mysterious and magical ring."}});

3. db.movies.updateOne(
{"title":"Pulp Fiction"},
{$push:{ "actors":"Samuel L.Jackson"}});

Text search-------
Creating the Index
db.movies.createIndex( { name: "text", synopsis: "text" } )

1. find all movies that have a synopsis that contains the word "Bilbo

Ans: db.movies.find( { $text: { $search: "Bilbo" } } )
2.  find all movies that have a synopsis that contains the word "Gandalf"

Ans: db.movies.find( { $text: { $search: "Gandalf" } } );
3.  find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
Ans: db.movies.find( { $text: { $search: "Bilbo -Gandalf" } },{"_id":0} );
4. find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
Ans: db.movies.find( { $text: { $search: "dwarves Hobbit" } },{"_id":0} );
5. find all movies that have a synopsis that contains the word "gold" and "dragon"

Ans: db.movies.find( { $text: { $search: "\"gold dragon\"" } },{"_id":0} );

Delete Documents
1.  delete the movie "Pee Wee Herman's Big Adventure"
Ans: db. movies.remove({"title": "Pee Wee Herman's Big Adventure"})
2. delete the movie "Avatar"
Ans: db. movies.remove({ "title": "Avatar"})

Relationships:
Insert the following documents into a users collection

username : GoodGuyGreg
first_name : "Good Guy"
last_name : "Greg"

Ans: db.users.insert({_id:1,username:"GoodGuyGreg", first_name:"Good Guy", last_name:"Greg"})

username : ScumbagSteve
full_name :
  first : "Scumbag"
  last : "Steve"

  Ans; db.users.insert({_id:2, username:"ScumbagSteve", fullname:{first: "Scumbag", last:"Steve"}})
  
  
  Insert the following documents into a posts collection
  
username : GoodGuyGreg
title : Passes out at party
body : Wakes up early and cleans house

Ans: db.posts.insert({username:"GoodGuyGreg", title:"Passes out at Party", body:"Raises your credit score"})

username : GoodGuyGreg
title : Steals your identity
body : Raises your credit score

Ans: db.posts.insert({ username:"GoodGuyGreg", title:"Steals your identity", body:"Raises your credit score"})

username : GoodGuyGreg
title : Reports a bug in your code
body : Sends you a Pull Request

db.posts.insert({username:"GoodGuyGreg", title:"Reports a bug in your code", body:"Sends you a pull request"})

username : ScumbagSteve
title : Borrows something
body : Sells it

db.posts.insert({ username:"ScumbagSteve", title:"Borrows something", body:"Sells it"})

username : ScumbagSteve
title : Borrows everything
body : The end

db.posts.insert({ username:"ScumbagSteve", title:"Borrows everything", body:"The end"})
username : ScumbagSteve
title : Forks your repo on github
body : Sets to private

db.posts.insert({username:"ScumbagSteve", title:"Forks your repo on github", body:"Sets to private"})


Insert the following documents into a comments collection
---------------------------------------------------------------------------------------------------------
username : GoodGuyGreg
comment : Hope you got a good deal!
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Borrows something"

db.comments.insert({ username:"GoodGuyGreg", comment:"Hope you got a good deal!", post:ObjectId("5f841c1e109122f5fe378495")})


username : GoodGuyGreg
comment : What's mine is yours!
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Borrows everything"

db.comments.insert({username:"GoodGuyGreg", comment:"What's mine is yours!", post:ObjectId("5f841df6109122f5fe378498")})


username : GoodGuyGreg
comment : Don't violate the licensing agreement!
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Forks your repo on github

db.comments.insert({username:"GoodGuyGreg", comment:"Don't violate the licensing agreement!", post:ObjectId("5f841ea1109122f5fe378499")})

username : ScumbagSteve
comment : It still isn't clean
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Passes out at party"

db.comments.insert({username:"ScumbagSteve", comment:"It still isn't clean", post:ObjectId("5f841ec5109122f5fe37849c")})

username : ScumbagSteve
comment : Denied your PR cause I found a hack
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Reports a bug in your code"

db.comments.insert({username:"ScumbagSteve", comment:"Denied your PR cause I found a hack", post:ObjectId("5f841eb3109122f5fe37849a")})


Querying related collections


1. find all users
Ans: db.users.find().pretty()
2. find all posts
Ans: db.posts.find().pretty()
3. find all posts that was authored by "GoodGuyGreg"
Ans: db.posts.find({username:"GoodGuyGreg"})
4. find all posts that was authored by "ScumbagSteve"
Ans: db.posts.find({username:"ScumbagSteve"})
5: find all comments
Ans: db.comments.find().pretty()
6. find all comments that was authored by "GoodGuyGreg"
Ans: db.comments.find({username:"GoodGuyGreg"})
7. find all comments that was authored by "ScumbagSteve"
Ans: db.comments.find({username:"ScumbagSteve"})
8. find all comments belonging to the post "Reports a bug in your code"
Ans: db.comments.find({username:"ScumbagSteve"})

